{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport endPoints from \"../../API/endPoints\";\nimport { apiInstance } from \"../../API/axios\";\n// import { CountryListType } from \"../../types/countryNameType\";\nconst initialState = [{\n  addressId: \"\",\n  averageRating: 0,\n  categoryId: \"\",\n  categoryName: \"\",\n  currency: \"\",\n  description: \"\",\n  fixedPrice: true,\n  forTime: \"\",\n  path: \"\",\n  price: 0,\n  remoteService: true,\n  sellerId: \"\",\n  serviceCover: \"\",\n  serviceCreatedDate: \"\",\n  serviceId: \"\",\n  subcategoryId: \"\",\n  subcategoryName: \"\",\n  title: \"\",\n  totalReview: 0,\n  wishlist: false,\n  _id: \"\",\n  sellerData: [],\n  gallery: [],\n  addressData: []\n}];\nexport const getServiceAction = createAsyncThunk('getServiceActionType', async val => {\n  let countryAbc = JSON.parse(localStorage.getItem(\"countryData\") || \"\");\n  const getServiceDetailsResponse = await apiInstance.post(endPoints.GET_SERVICE_API + '?categoryId=undefined' + '&subcategoryId=undefined' + '&string=' + `${val}`, {\n    country: countryAbc,\n    limit: 10,\n    pageno: 1\n  }).then(res => {\n    return res.data.data;\n  }); // console.log(\"getServiceDetailsResponse--->\", getServiceDetailsResponse)\n\n  return getServiceDetailsResponse;\n});\nexport const getServiceSlice = createSlice({\n  name: 'getServiceInfo',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getServiceAction.fulfilled, (state, action) => {\n      state = action.payload;\n      return state;\n    });\n  }\n});\nexport default getServiceSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","endPoints","apiInstance","initialState","addressId","averageRating","categoryId","categoryName","currency","description","fixedPrice","forTime","path","price","remoteService","sellerId","serviceCover","serviceCreatedDate","serviceId","subcategoryId","subcategoryName","title","totalReview","wishlist","_id","sellerData","gallery","addressData","getServiceAction","val","countryAbc","JSON","parse","localStorage","getItem","getServiceDetailsResponse","post","GET_SERVICE_API","country","limit","pageno","then","res","data","getServiceSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"sources":["/home/spx138/Desktop/sparxIT/Aladdin/TS Aladin/aladin-ts-toolkit/src/store/slices/searchBarSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport endPoints from \"../../API/endPoints\";\nimport { apiInstance } from \"../../API/axios\";\nimport { GetServiceType, GetServiceTypeList } from \"../../types/GetServiceType\";\n// import { CountryListType } from \"../../types/countryNameType\";\n\n\nconst initialState: GetServiceTypeList = [{\n    addressId: \"\",\n    averageRating: 0,\n    categoryId: \"\",\n    categoryName: \"\",\n    currency: \"\",\n    description: \"\",\n    fixedPrice: true,\n    forTime: \"\",\n    path: \"\",\n    price: 0,\n    remoteService: true,\n    sellerId: \"\",\n    serviceCover: \"\",\n    serviceCreatedDate: \"\",\n    serviceId: \"\",\n    subcategoryId: \"\",\n    subcategoryName: \"\",\n    title: \"\",\n    totalReview: 0,\n    wishlist: false,\n    _id: \"\",\n    sellerData: [],\n    gallery: [],\n    addressData: []\n}]\n\n\nexport const getServiceAction = createAsyncThunk(\n    'getServiceActionType',\n    async (val: any) => {\n        let countryAbc = JSON.parse(localStorage.getItem(\"countryData\") || \"\")\n        const getServiceDetailsResponse = await apiInstance.post(endPoints.GET_SERVICE_API\n            + '?categoryId=undefined'\n            + '&subcategoryId=undefined'\n            + '&string=' + `${val}`,\n            {\n                country: countryAbc,\n                limit: 10,\n                pageno: 1\n            }\n        )\n            .then((res) => {\n                return res.data.data\n            })\n        // console.log(\"getServiceDetailsResponse--->\", getServiceDetailsResponse)\n        return getServiceDetailsResponse;\n    }\n)\n\nexport const getServiceSlice = createSlice({\n    name: 'getServiceInfo',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(getServiceAction.fulfilled, (state, action) => {\n            state = action.payload\n            return state;\n        })\n    }\n})\n\nexport default getServiceSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA;AAGA,MAAMC,YAAgC,GAAG,CAAC;EACtCC,SAAS,EAAE,EAD2B;EAEtCC,aAAa,EAAE,CAFuB;EAGtCC,UAAU,EAAE,EAH0B;EAItCC,YAAY,EAAE,EAJwB;EAKtCC,QAAQ,EAAE,EAL4B;EAMtCC,WAAW,EAAE,EANyB;EAOtCC,UAAU,EAAE,IAP0B;EAQtCC,OAAO,EAAE,EAR6B;EAStCC,IAAI,EAAE,EATgC;EAUtCC,KAAK,EAAE,CAV+B;EAWtCC,aAAa,EAAE,IAXuB;EAYtCC,QAAQ,EAAE,EAZ4B;EAatCC,YAAY,EAAE,EAbwB;EActCC,kBAAkB,EAAE,EAdkB;EAetCC,SAAS,EAAE,EAf2B;EAgBtCC,aAAa,EAAE,EAhBuB;EAiBtCC,eAAe,EAAE,EAjBqB;EAkBtCC,KAAK,EAAE,EAlB+B;EAmBtCC,WAAW,EAAE,CAnByB;EAoBtCC,QAAQ,EAAE,KApB4B;EAqBtCC,GAAG,EAAE,EArBiC;EAsBtCC,UAAU,EAAE,EAtB0B;EAuBtCC,OAAO,EAAE,EAvB6B;EAwBtCC,WAAW,EAAE;AAxByB,CAAD,CAAzC;AA4BA,OAAO,MAAMC,gBAAgB,GAAG7B,gBAAgB,CAC5C,sBAD4C,EAE5C,MAAO8B,GAAP,IAAoB;EAChB,IAAIC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,KAAuC,EAAlD,CAAjB;EACA,MAAMC,yBAAyB,GAAG,MAAMjC,WAAW,CAACkC,IAAZ,CAAiBnC,SAAS,CAACoC,eAAV,GACnD,uBADmD,GAEnD,0BAFmD,GAGnD,UAHmD,GAGrC,GAAER,GAAI,EAHc,EAIpC;IACIS,OAAO,EAAER,UADb;IAEIS,KAAK,EAAE,EAFX;IAGIC,MAAM,EAAE;EAHZ,CAJoC,EAUnCC,IAVmC,CAU7BC,GAAD,IAAS;IACX,OAAOA,GAAG,CAACC,IAAJ,CAASA,IAAhB;EACH,CAZmC,CAAxC,CAFgB,CAehB;;EACA,OAAOR,yBAAP;AACH,CAnB2C,CAAzC;AAsBP,OAAO,MAAMS,eAAe,GAAG5C,WAAW,CAAC;EACvC6C,IAAI,EAAE,gBADiC;EAEvC1C,YAFuC;EAGvC2C,QAAQ,EAAE,EAH6B;EAIvCC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CAACC,OAAR,CAAgBrB,gBAAgB,CAACsB,SAAjC,EAA4C,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3DD,KAAK,GAAGC,MAAM,CAACC,OAAf;MACA,OAAOF,KAAP;IACH,CAHD;EAIH;AATsC,CAAD,CAAnC;AAYP,eAAeP,eAAe,CAACU,OAA/B"},"metadata":{},"sourceType":"module"}