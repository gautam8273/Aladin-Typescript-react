{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport endPoints from \"../../API/endPoints\";\nimport { apiInstance } from \"../../API/axios\";\nconst initialState = [{\n  addressLine1: \"\",\n  addressLine2: \"\",\n  businessName: \"\",\n  cityId: \"\",\n  comment: \"\",\n  // companyRegistrationNumber: '',\n  countryId: \"\",\n  email: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  password: \"\",\n  re_password: \"\",\n  phone: \"\",\n  postcode: \"\",\n  // primaryContactPerson: \"\",\n  stateId: \"\",\n  type: \"\",\n  vat: \"\",\n  dob: \"\",\n  proofOfIdentity: \"\",\n  privacyPolicy: false\n}];\nexport const freelancerSignUpFormAction = createAsyncThunk(\"freelancerSellerFormActionType\", async data => {\n  const freelancerSellerFormResponse = await apiInstance.post(endPoints.SELLER_SIGN_UP_FORM_API, data).then(res => {\n    return res.data.data;\n  });\n  console.log(\"freelancerSellerFormResponse---->\", freelancerSellerFormResponse);\n  return freelancerSellerFormResponse;\n});\nexport const freelancerSellerFormDataSlice = createSlice({\n  name: 'freelancerSellerFormInfo',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(freelancerSignUpFormAction.fulfilled, (state, action) => {\n      state = action.payload;\n      return state;\n    });\n  }\n});\nexport default freelancerSellerFormDataSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","endPoints","apiInstance","initialState","addressLine1","addressLine2","businessName","cityId","comment","countryId","email","firstName","lastName","password","re_password","phone","postcode","stateId","type","vat","dob","proofOfIdentity","privacyPolicy","freelancerSignUpFormAction","data","freelancerSellerFormResponse","post","SELLER_SIGN_UP_FORM_API","then","res","console","log","freelancerSellerFormDataSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"sources":["/home/spx138/Desktop/sparxIT/Aladdin/TS Aladin/aladin-ts-toolkit/src/store/slices/freelancerSellerFormSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport endPoints from \"../../API/endPoints\";\nimport { apiInstance } from \"../../API/axios\";\nimport { FreelancerSellerFormType } from \"../../types/FreelancerSellerFormType\";\n\nconst initialState: FreelancerSellerFormType[] = [{\n    addressLine1: \"\",\n    addressLine2: \"\",\n    businessName: \"\",\n    cityId: \"\",\n    comment: \"\",\n    // companyRegistrationNumber: '',\n    countryId: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    password: \"\",\n    re_password: \"\",\n    phone: \"\",\n    postcode: \"\",\n    // primaryContactPerson: \"\",\n    stateId: \"\",\n    type: \"\",\n    vat: \"\",\n    dob: \"\",\n    proofOfIdentity: \"\",\n    privacyPolicy: false\n}]\n\nexport const freelancerSignUpFormAction = createAsyncThunk(\n    \"freelancerSellerFormActionType\",\n    async (data: any) => {\n        const freelancerSellerFormResponse = await apiInstance.post(endPoints.SELLER_SIGN_UP_FORM_API, data)\n            .then((res) => {\n                return res.data.data;\n            })\n        console.log(\"freelancerSellerFormResponse---->\", freelancerSellerFormResponse)\n        return freelancerSellerFormResponse;\n    }\n)\n\n\nexport const freelancerSellerFormDataSlice = createSlice({\n    name: 'freelancerSellerFormInfo',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(freelancerSignUpFormAction.fulfilled, (state, action) => {\n            state = action.payload\n            return state;\n        })\n    }\n})\n\nexport default freelancerSellerFormDataSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAGA,MAAMC,YAAwC,GAAG,CAAC;EAC9CC,YAAY,EAAE,EADgC;EAE9CC,YAAY,EAAE,EAFgC;EAG9CC,YAAY,EAAE,EAHgC;EAI9CC,MAAM,EAAE,EAJsC;EAK9CC,OAAO,EAAE,EALqC;EAM9C;EACAC,SAAS,EAAE,EAPmC;EAQ9CC,KAAK,EAAE,EARuC;EAS9CC,SAAS,EAAE,EATmC;EAU9CC,QAAQ,EAAE,EAVoC;EAW9CC,QAAQ,EAAE,EAXoC;EAY9CC,WAAW,EAAE,EAZiC;EAa9CC,KAAK,EAAE,EAbuC;EAc9CC,QAAQ,EAAE,EAdoC;EAe9C;EACAC,OAAO,EAAE,EAhBqC;EAiB9CC,IAAI,EAAE,EAjBwC;EAkB9CC,GAAG,EAAE,EAlByC;EAmB9CC,GAAG,EAAE,EAnByC;EAoB9CC,eAAe,EAAE,EApB6B;EAqB9CC,aAAa,EAAE;AArB+B,CAAD,CAAjD;AAwBA,OAAO,MAAMC,0BAA0B,GAAGxB,gBAAgB,CACtD,gCADsD,EAEtD,MAAOyB,IAAP,IAAqB;EACjB,MAAMC,4BAA4B,GAAG,MAAMvB,WAAW,CAACwB,IAAZ,CAAiBzB,SAAS,CAAC0B,uBAA3B,EAAoDH,IAApD,EACtCI,IADsC,CAChCC,GAAD,IAAS;IACX,OAAOA,GAAG,CAACL,IAAJ,CAASA,IAAhB;EACH,CAHsC,CAA3C;EAIAM,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDN,4BAAjD;EACA,OAAOA,4BAAP;AACH,CATqD,CAAnD;AAaP,OAAO,MAAMO,6BAA6B,GAAGhC,WAAW,CAAC;EACrDiC,IAAI,EAAE,0BAD+C;EAErD9B,YAFqD;EAGrD+B,QAAQ,EAAE,EAH2C;EAIrDC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CAACC,OAAR,CAAgBd,0BAA0B,CAACe,SAA3C,EAAsD,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACrED,KAAK,GAAGC,MAAM,CAACC,OAAf;MACA,OAAOF,KAAP;IACH,CAHD;EAIH;AAToD,CAAD,CAAjD;AAYP,eAAeP,6BAA6B,CAACU,OAA7C"},"metadata":{},"sourceType":"module"}