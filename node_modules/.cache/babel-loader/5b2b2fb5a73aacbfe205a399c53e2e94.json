{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { apiInstance } from \"../../API/axios\";\nimport endPoints from \"../../API/endPoints\";\nconst initialState = {\n  _id: \"\",\n  sellerId: \"\",\n  title: \"\",\n  categoryId: \"\",\n  subcategoryId: \"\",\n  fixedPrice: false,\n  forTime: \"\",\n  description: \"\",\n  remoteService: false,\n  addressId: \"\",\n  gallery: [],\n  serviceCover: \"\",\n  sellerData: [],\n  addressData: [],\n  sellerInformationData: [],\n  wishlist: false,\n  cart: false,\n  totalReview: 0,\n  averageRating: 0,\n  serviceId: \"\",\n  price: \"\",\n  serviceCreatedDate: \"\",\n  currency: \"\",\n  minPrice: 0,\n  maxPrice: 0,\n  path: \"\",\n  categoryName: \"\",\n  subcategoryName: \"\"\n};\nexport const getServiceDetailsPageAction = createAsyncThunk('serviceDetailspageActionType', async serviceId => {\n  let countryAbc = localStorage.getItem(\"countryData\");\n  const serviceDetailsPageResponse = await apiInstance.get(endPoints.SERVICE_DETAILS_PAGE_API + '?serviceId=' + `${serviceId}` + '&country=' + {\n    country: countryAbc\n  }).then(res => {\n    return res.data.data;\n  }); // console.log(\"serviceDeatilspageResponse--->\", serviceDetailsPageResponse)\n\n  return serviceDetailsPageResponse;\n});\nexport const serviceDetailsPageSlice = createSlice({\n  name: \"serviceDetailspageInfo\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getServiceDetailsPageAction.fulfilled, (state, action) => {\n      state = action.payload;\n      return state;\n    });\n  }\n});\nexport default serviceDetailsPageSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","apiInstance","endPoints","initialState","_id","sellerId","title","categoryId","subcategoryId","fixedPrice","forTime","description","remoteService","addressId","gallery","serviceCover","sellerData","addressData","sellerInformationData","wishlist","cart","totalReview","averageRating","serviceId","price","serviceCreatedDate","currency","minPrice","maxPrice","path","categoryName","subcategoryName","getServiceDetailsPageAction","countryAbc","localStorage","getItem","serviceDetailsPageResponse","get","SERVICE_DETAILS_PAGE_API","country","then","res","data","serviceDetailsPageSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"sources":["/home/spx138/Desktop/sparxIT/Aladdin/TS Aladin/aladin-ts-toolkit/src/store/slices/serviceDetailsPageSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { apiInstance } from \"../../API/axios\";\nimport endPoints from \"../../API/endPoints\";\nimport { ServiceDeatilsPageType } from \"../../types/ServiceDeatilsPageType\";\n\n\nconst initialState: ServiceDeatilsPageType = {\n    _id: \"\",\n    sellerId: \"\",\n    title: \"\",\n    categoryId: \"\",\n    subcategoryId: \"\",\n    fixedPrice: false,\n    forTime: \"\",\n    description: \"\",\n    remoteService: false,\n    addressId: \"\",\n    gallery: [],\n    serviceCover: \"\",\n    sellerData: [],\n    addressData: [],\n    sellerInformationData: [],\n    wishlist: false,\n    cart: false,\n    totalReview: 0,\n    averageRating: 0,\n    serviceId: \"\",\n    price: \"\",\n    serviceCreatedDate: \"\",\n    currency: \"\",\n    minPrice: 0,\n    maxPrice: 0,\n    path: \"\",\n    categoryName: \"\",\n    subcategoryName: \"\"\n}\n\nexport const getServiceDetailsPageAction = createAsyncThunk(\n    'serviceDetailspageActionType',\n    async (serviceId: string) => {\n        let countryAbc = localStorage.getItem(\"countryData\")\n        const serviceDetailsPageResponse = await apiInstance.get(endPoints.SERVICE_DETAILS_PAGE_API\n            + '?serviceId='\n            + `${serviceId}`\n            + '&country='\n            + {\n            country: countryAbc,\n\n        })\n            .then((res) => {\n                return res.data.data\n            })\n        // console.log(\"serviceDeatilspageResponse--->\", serviceDetailsPageResponse)\n        return serviceDetailsPageResponse;\n    }\n)\n\nexport const serviceDetailsPageSlice = createSlice({\n    name: \"serviceDetailspageInfo\",\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(getServiceDetailsPageAction.fulfilled, (state, action) => {\n            state = action.payload\n            return state;\n        })\n    }\n})\n\nexport default serviceDetailsPageSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAIA,MAAMC,YAAoC,GAAG;EACzCC,GAAG,EAAE,EADoC;EAEzCC,QAAQ,EAAE,EAF+B;EAGzCC,KAAK,EAAE,EAHkC;EAIzCC,UAAU,EAAE,EAJ6B;EAKzCC,aAAa,EAAE,EAL0B;EAMzCC,UAAU,EAAE,KAN6B;EAOzCC,OAAO,EAAE,EAPgC;EAQzCC,WAAW,EAAE,EAR4B;EASzCC,aAAa,EAAE,KAT0B;EAUzCC,SAAS,EAAE,EAV8B;EAWzCC,OAAO,EAAE,EAXgC;EAYzCC,YAAY,EAAE,EAZ2B;EAazCC,UAAU,EAAE,EAb6B;EAczCC,WAAW,EAAE,EAd4B;EAezCC,qBAAqB,EAAE,EAfkB;EAgBzCC,QAAQ,EAAE,KAhB+B;EAiBzCC,IAAI,EAAE,KAjBmC;EAkBzCC,WAAW,EAAE,CAlB4B;EAmBzCC,aAAa,EAAE,CAnB0B;EAoBzCC,SAAS,EAAE,EApB8B;EAqBzCC,KAAK,EAAE,EArBkC;EAsBzCC,kBAAkB,EAAE,EAtBqB;EAuBzCC,QAAQ,EAAE,EAvB+B;EAwBzCC,QAAQ,EAAE,CAxB+B;EAyBzCC,QAAQ,EAAE,CAzB+B;EA0BzCC,IAAI,EAAE,EA1BmC;EA2BzCC,YAAY,EAAE,EA3B2B;EA4BzCC,eAAe,EAAE;AA5BwB,CAA7C;AA+BA,OAAO,MAAMC,2BAA2B,GAAGjC,gBAAgB,CACvD,8BADuD,EAEvD,MAAOwB,SAAP,IAA6B;EACzB,IAAIU,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAjB;EACA,MAAMC,0BAA0B,GAAG,MAAMnC,WAAW,CAACoC,GAAZ,CAAgBnC,SAAS,CAACoC,wBAAV,GACnD,aADmD,GAElD,GAAEf,SAAU,EAFsC,GAGnD,WAHmD,GAInD;IACFgB,OAAO,EAAEN;EADP,CAJmC,EAQpCO,IARoC,CAQ9BC,GAAD,IAAS;IACX,OAAOA,GAAG,CAACC,IAAJ,CAASA,IAAhB;EACH,CAVoC,CAAzC,CAFyB,CAazB;;EACA,OAAON,0BAAP;AACH,CAjBsD,CAApD;AAoBP,OAAO,MAAMO,uBAAuB,GAAG3C,WAAW,CAAC;EAC/C4C,IAAI,EAAE,wBADyC;EAE/CzC,YAF+C;EAG/C0C,QAAQ,EAAE,EAHqC;EAI/CC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CAACC,OAAR,CAAgBhB,2BAA2B,CAACiB,SAA5C,EAAuD,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACtED,KAAK,GAAGC,MAAM,CAACC,OAAf;MACA,OAAOF,KAAP;IACH,CAHD;EAIH;AAT8C,CAAD,CAA3C;AAYP,eAAeP,uBAAuB,CAACU,OAAvC"},"metadata":{},"sourceType":"module"}