{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { apiInstance } from \"../../API/axios\";\nimport endPoints from \"../../API/endPoints\";\nconst initialState = [{\n  _id: \"\",\n  sellerId: \"\",\n  title: \"\",\n  categoryId: \"\",\n  subcategoryId: \"\",\n  fixedPrice: true,\n  forTime: \"\",\n  description: \"\",\n  remoteService: false,\n  addressId: \"\",\n  gallery: [],\n  serviceCover: \"\",\n  sellerData: [],\n  addressData: [],\n  wishlist: true,\n  totalReview: 0,\n  averageRating: 0,\n  serviceId: \"\",\n  serviceCreatedDate: \"\",\n  currency: \"\",\n  minPrice: 0,\n  maxPrice: 0,\n  path: \"\",\n  categoryName: \"\",\n  subcategoryName: \"\",\n  price: \"\"\n}];\nexport const otherServiceFromSameSellerAction = createAsyncThunk(\"otherServiceFromSameSellerActionType\", async payload => {\n  const countryName = JSON.parse(localStorage.getItem(\"countryData\") || \"\");\n  const otherServiceResponse = await apiInstance.get(endPoints.OTHER_SERVICE_SAME_SELLER_API + '?serviceId=' + `${payload.serviceId}` + '&sellerId=' + `${payload.sellerId}` + '&country=' + countryName).then(res => {\n    return res.data.data;\n  });\n  return otherServiceResponse;\n});\nexport const otherServiceFromSameSellerSlice = createSlice({\n  name: \"otherServiceFromSameSellerInfo\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(otherServiceFromSameSellerAction.fulfilled, (state, action) => {\n      state = action.payload;\n      return state;\n    });\n  }\n});\nexport default otherServiceFromSameSellerSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","apiInstance","endPoints","initialState","_id","sellerId","title","categoryId","subcategoryId","fixedPrice","forTime","description","remoteService","addressId","gallery","serviceCover","sellerData","addressData","wishlist","totalReview","averageRating","serviceId","serviceCreatedDate","currency","minPrice","maxPrice","path","categoryName","subcategoryName","price","otherServiceFromSameSellerAction","payload","countryName","JSON","parse","localStorage","getItem","otherServiceResponse","get","OTHER_SERVICE_SAME_SELLER_API","then","res","data","otherServiceFromSameSellerSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","reducer"],"sources":["/home/spx138/Desktop/sparxIT/Aladdin/TS Aladin/aladin-ts-toolkit/src/store/slices/otherServiceFromSameSellerSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { apiInstance } from \"../../API/axios\";\nimport endPoints from \"../../API/endPoints\";\nimport { OtherServiceDataType } from \"../../types/OtherServiceSameSellerType\";\n\nconst initialState: OtherServiceDataType = [{\n    _id: \"\",\n    sellerId: \"\",\n    title: \"\",\n    categoryId: \"\",\n    subcategoryId: \"\",\n    fixedPrice: true,\n    forTime: \"\",\n    description: \"\",\n    remoteService: false,\n    addressId: \"\",\n    gallery: [],\n    serviceCover: \"\",\n    sellerData: [],\n    addressData: [],\n    wishlist: true,\n    totalReview: 0,\n    averageRating: 0,\n    serviceId: \"\",\n    serviceCreatedDate: \"\",\n    currency: \"\",\n    minPrice: 0,\n    maxPrice: 0,\n    path: \"\",\n    categoryName: \"\",\n    subcategoryName: \"\",\n    price: \"\"\n}]\n\nexport const otherServiceFromSameSellerAction = createAsyncThunk(\n    \"otherServiceFromSameSellerActionType\",\n\n    async (payload: { serviceId: string, sellerId: string }) => {\n        const countryName = JSON.parse(localStorage.getItem(\"countryData\") || \"\");\n        const otherServiceResponse = await apiInstance.get(endPoints.OTHER_SERVICE_SAME_SELLER_API\n            + '?serviceId=' + `${payload.serviceId}`\n            + '&sellerId=' + `${payload.sellerId}`\n            + '&country=' + countryName\n        )\n            .then((res) => {\n                return res.data.data\n            })\n        return otherServiceResponse;\n    }\n)\n\nexport const otherServiceFromSameSellerSlice = createSlice({\n    name: \"otherServiceFromSameSellerInfo\",\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(otherServiceFromSameSellerAction.fulfilled, (state, action) => {\n            state = action.payload\n            return state;\n        })\n    }\n})\n\nexport default otherServiceFromSameSellerSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAGA,MAAMC,YAAkC,GAAG,CAAC;EACxCC,GAAG,EAAE,EADmC;EAExCC,QAAQ,EAAE,EAF8B;EAGxCC,KAAK,EAAE,EAHiC;EAIxCC,UAAU,EAAE,EAJ4B;EAKxCC,aAAa,EAAE,EALyB;EAMxCC,UAAU,EAAE,IAN4B;EAOxCC,OAAO,EAAE,EAP+B;EAQxCC,WAAW,EAAE,EAR2B;EASxCC,aAAa,EAAE,KATyB;EAUxCC,SAAS,EAAE,EAV6B;EAWxCC,OAAO,EAAE,EAX+B;EAYxCC,YAAY,EAAE,EAZ0B;EAaxCC,UAAU,EAAE,EAb4B;EAcxCC,WAAW,EAAE,EAd2B;EAexCC,QAAQ,EAAE,IAf8B;EAgBxCC,WAAW,EAAE,CAhB2B;EAiBxCC,aAAa,EAAE,CAjByB;EAkBxCC,SAAS,EAAE,EAlB6B;EAmBxCC,kBAAkB,EAAE,EAnBoB;EAoBxCC,QAAQ,EAAE,EApB8B;EAqBxCC,QAAQ,EAAE,CArB8B;EAsBxCC,QAAQ,EAAE,CAtB8B;EAuBxCC,IAAI,EAAE,EAvBkC;EAwBxCC,YAAY,EAAE,EAxB0B;EAyBxCC,eAAe,EAAE,EAzBuB;EA0BxCC,KAAK,EAAE;AA1BiC,CAAD,CAA3C;AA6BA,OAAO,MAAMC,gCAAgC,GAAG/B,gBAAgB,CAC5D,sCAD4D,EAG5D,MAAOgC,OAAP,IAA4D;EACxD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,KAAuC,EAAlD,CAApB;EACA,MAAMC,oBAAoB,GAAG,MAAMpC,WAAW,CAACqC,GAAZ,CAAgBpC,SAAS,CAACqC,6BAAV,GAC7C,aAD6C,GAC5B,GAAER,OAAO,CAACV,SAAU,EADQ,GAE7C,YAF6C,GAE7B,GAAEU,OAAO,CAAC1B,QAAS,EAFU,GAG7C,WAH6C,GAG/B2B,WAHe,EAK9BQ,IAL8B,CAKxBC,GAAD,IAAS;IACX,OAAOA,GAAG,CAACC,IAAJ,CAASA,IAAhB;EACH,CAP8B,CAAnC;EAQA,OAAOL,oBAAP;AACH,CAd2D,CAAzD;AAiBP,OAAO,MAAMM,+BAA+B,GAAG3C,WAAW,CAAC;EACvD4C,IAAI,EAAE,gCADiD;EAEvDzC,YAFuD;EAGvD0C,QAAQ,EAAE,EAH6C;EAIvDC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CAACC,OAAR,CAAgBlB,gCAAgC,CAACmB,SAAjD,EAA4D,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3ED,KAAK,GAAGC,MAAM,CAACpB,OAAf;MACA,OAAOmB,KAAP;IACH,CAHD;EAIH;AATsD,CAAD,CAAnD;AAYP,eAAeP,+BAA+B,CAACS,OAA/C"},"metadata":{},"sourceType":"module"}